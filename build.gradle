buildscript {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java' // Needed for protobuf
//    apply from: 'gradle/aot.gradle'
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'

    id "com.google.protobuf" version "0.6.1"
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// Avro contains a log4j instance for some ungodly reason
configurations.all {
    exclude module: 'slf4j-log4j12'
}

repositories {
    mavenCentral()
}

protobuf {
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:2.6.1'
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

configurations { // Needs to go before dependencies
    quasar
}

dependencies {
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'com.google.inject', name: 'guice', version: '4.0'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '2.6.1'

    compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'

    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3'
    compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '1.8.10'
    compile group: 'org.apache.solr', name: 'solr-solrj', version: '5.2.1'
    compile group: 'org.apache.solr', name: 'solr-noggit', version: '3.5.0'

    compile group: 'org.javafp', name: 'parsecj', version: '0.2'
    compile group: 'org.json', name: 'json', version: '20141113'
    compile group: 'org.mapdb', name: 'mapdb', version: '2.0-beta7'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'

    compile group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'nu.pattern', name: 'opencv', version: '2.4.9-5'

    compile 'co.paralleluniverse:quasar-core:0.7.2:jdk8'
    quasar  "co.paralleluniverse:quasar-core:0.7.2:jdk8@jar"

    testCompile 'junit:junit:4.12'
    testCompile 'org.xerial:sqlite-jdbc:3.8.11'
}

// Enable javaagent for fibers on test code
tasks.withType(Test) {
    systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
    systemProperty 'co.paralleluniverse.fibers.detectRunawayFibers', 'true'
    jvmArgs "-javaagent:${configurations.quasar.singleFile}"
}

classes {
    doFirst {
        println "Excuting scanSuspendables..."
        ant.taskdef(
                name: 'scanSuspendables', classname: 'co.paralleluniverse.fibers.instrument.SuspendablesScanner',
                classpath: "build/classes/main:build/resources/main:${configurations.quasar.asPath}:${configurations.runtime.asPath}")
        ant.scanSuspendables(
                auto: false,
                suspendablesFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendables",
                supersFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendable-supers",
                append: true) {
            fileset(dir: sourceSets.main.output.classesDir)
        }
    }
}

defaultTasks 'build', 'writeClasspath'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDir 'src/generated/main'
        }
        proto {
            // needed so that AsyncHBase's messages get built with 2.6.1
            srcDir 'build/extracted-include-protos/main'
        }
    }

    test {
        java {
            srcDir 'src/generated/main'
        }
    }
}

version = '1.0'
def jarTitle = 'Pulse Search Engine'
def mainClass = 'net.digitalbebop.AppBootstrapper'

jar {
    baseName = 'pulse'
    manifest {
        attributes 'Implementation-Title': jarTitle,
                   'Implementation-Version': version,
                   'Main-Class': mainClass
    }
}

task fatJar(type: Jar) {
    baseName = 'pulse-all'
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Implementation-Title': jarTitle,
                   'Implementation-Version': version,
                   'Main-Class': mainClass
    }
    with jar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

/*
 * Write out the classpath for all internal dependencies, then append the
 * actual expected build JAR to the end of it.
 */
task writeClasspath(dependsOn: build) << {
    new File(buildDir.absolutePath + "/runtime.classpath").withWriter {
        out -> out.writeLine(sourceSets.main.runtimeClasspath.asPath +
                             ":" + jar.archivePath);
    }
    new File(buildDir.absolutePath + "/quasar-core.path").withWriter {
        out -> out.writeLine(configurations.quasar.asPath);
    }
}

test {
    // enable TestNG support (default is JUnit)
    useJUnit()

    testSrcDirs = ['src/test/java']

    // Toggle standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = false

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=512m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}