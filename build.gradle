buildscript {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java' // Needed for protobuf
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'

    id "com.google.protobuf" version "0.6.1"
    id "com.commercehub.gradle.plugin.avro" version "0.3.4"
}

repositories {
    mavenCentral()
}

protobuf {
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:2.6.1'
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

dependencies {
    testCompile 'junit:junit:4.12'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3'
    compile group: 'com.google.inject', name: 'guice', version: '4.0'
    compile 'com.google.inject.extensions:guice-assistedinject:4.0'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'org.apache.solr', name: 'solr-solrj', version: '5.2.1'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'org.slf4j:slf4j-simple:1.6.1'
    compile 'com.google.protobuf:protobuf-java:2.6.1'
    compile 'org.apache.avro:avro-tools:1.7.7'
    compile 'org.hbase:asynchbase:1.6.0'
    compile 'org.apache.solr:solr-solrj:5.2.1'
    compile 'org.json:json:20141113'
    compile 'org.javafp:parsecj:0.2'
    compile 'org.apache.solr:solr-noggit:3.5.0'
}

defaultTasks 'build', 'writeClasspath'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDir 'src/generated/main'
        }
        proto {
            // needed so that AsyncHBase's messages get built with 2.6.1
            srcDir 'build/extracted-include-protos/main'
        }
    }
}

version = '1.0'
def jarTitle = 'Pulse Search Engine'
def mainClass = 'net.digitalbebop.AppBootstrapper'

jar {
    baseName = 'pulse'
    manifest {
        attributes 'Implementation-Title': jarTitle,
                   'Implementation-Version': version,
                   'Main-Class': mainClass
    }
}

task fatJar(type: Jar) {
    baseName = 'pulse-all'
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Implementation-Title': jarTitle,
                   'Implementation-Version': version,
                   'Main-Class': mainClass
    }
    with jar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

/*
 * Write out the classpath for all internal dependencies, then append the
 * actual expected build JAR to the end of it.
 */
task writeClasspath(dependsOn: build) << {
    new File(buildDir.absolutePath + "/runtime.classpath").withWriter {
        out -> out.writeLine(sourceSets.main.runtimeClasspath.asPath +
                             ":" + jar.archivePath);
    }
}

test {
    // enable TestNG support (default is JUnit)
    useJUnit()

    testSrcDirs = ['src/test/java']

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}