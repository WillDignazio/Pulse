SOLR_LOCATOR: {
    # Name of solr collection
    collection: pulse

    # ZooKeeper ensemble
    zkHost: "$ZK_HOST" 
}

morphlines: [ {
    id: pulseIndexer
    importCommands: ["org.kitesdk.morphline.**", "com.ngdata.**"]

    commands: [ {
            extractHBaseCells {
                mappings : [ {
                    inputColumn : "index:current"
                    outputField : "_attachment_body" 
                    type : "byte[]" 
                    source : value
                }]
            }
        }
        # Parses the Avro container file and emit a record for each Avro object
        {
            readAvro {
                writerSchemaString : """{
                    "namespace": "net.digitalbebop.avro",
                    "name": "PulseAvroIndex",
                    "type": "record",
                    "doc": "The data stored in HBase to index for the element",
                    "fields": [
                        {
                            "name": "id", 
                            "type": "string",
                            "doc": "The globally unique ID for this element. It needs to be in the form, moduleName-moduleId-timestamp"
                        },
                        {
                            "name": "timestamp", 
                            "type": "long",
                            "doc": "the time that this record was created"
                        },
                        {
                           "name": "current", 
                            "type": "boolean",
                            "doc": "If this record is the most up-to-date instance of the element"
                        },
                        {
                            "name": "format", 
                            "type": "string",
                            "doc": "the format of the raw data. This will be things like pdf, movie, code, etc."
                        },
                        {
                            "name": "tags", 
                            "type": {
                                "type": "array", 
                                "items": "string",
                                "avro.java.string": "String"
                            },
                            "doc": "keywords used for searching"
                        },
                        {
                            "name": "username", 
                            "type": "string",
                            "doc": "the csh username of the person who generated this record"
                        },
                        {
                            "name": "deleted", 
                            "type": "boolean",
                            "doc": "if the record has been removed by the moduke"
                        },
                        {
                            "name": "moduleName", 
                            "type": "string",
                            "doc": "the unique module name that generated this record"
                        },
                        {
                            "name": "moduleId", 
                            "type": "string",
                            "doc": "the unique ID that the module gave this record"},
                        {
                            "name": "metaData", 
                            "type": "string",
                            "doc": "base 64 encoded JSON blog of metadata about this record. Used in displaying results"
                        },
                        {
                            "name": "data", 
                            "type": "string",
                            "doc": "the english text to search through for this record"
                        }]}"""
            }
        }
        {
            extractAvroPaths {
                flatten: false
                paths : {
                    id: /id
                    timestamp: /timestamp
                    current: /current
                    format: /format
                    tagsStr: "/tags[]"
                    username: /username
                    deleted: /deleted
                    moduleName: /moduleName
                    moduleId: /moduleId
                    metaData: /metaData
                    data: /data
                }
            }
        }
        {
            convertTimestamp {
                field: timestamp
                inputFormats: ["unixTimeInSeconds"]
                outputFormat: "yyyy-MM-dd'T'HH:mm:ss.SSS'Z/MINUTE'"
            }
        }
        {
            findReplace {
                field: tagsStr
                pattern: """(org.apache.avro.util.Utf8:|\]|\[)"""
                isRegex: true
                replacement: ""
            }
        }
        {
            split {
                inputField : tagsStr
                outputField : tags
                separator : ","
            }
        }
        {
            sanitizeUnknownSolrFields {
                solrLocator : ${SOLR_LOCATOR}
            }
        }
        {
            logInfo {
                format : "output record: {}"
                args : ["@{}"]
            }
        }
    ]
  }
]
