/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package net.digitalbebop.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class index extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"index\",\"namespace\":\"net.digitalbebop.avro\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"current\",\"type\":\"boolean\"},{\"name\":\"format\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"deleted\",\"type\":\"boolean\"},{\"name\":\"moduleName\",\"type\":\"string\"},{\"name\":\"moduleId\",\"type\":\"string\"},{\"name\":\"metaData\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long timestamp;
  @Deprecated public boolean current;
  @Deprecated public java.lang.CharSequence format;
  @Deprecated public java.util.List<java.lang.CharSequence> tags;
  @Deprecated public java.lang.CharSequence username;
  @Deprecated public boolean deleted;
  @Deprecated public java.lang.CharSequence moduleName;
  @Deprecated public java.lang.CharSequence moduleId;
  @Deprecated public java.lang.CharSequence metaData;
  @Deprecated public java.lang.CharSequence data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public index() {}

  /**
   * All-args constructor.
   */
  public index(java.lang.Long timestamp, java.lang.Boolean current, java.lang.CharSequence format, java.util.List<java.lang.CharSequence> tags, java.lang.CharSequence username, java.lang.Boolean deleted, java.lang.CharSequence moduleName, java.lang.CharSequence moduleId, java.lang.CharSequence metaData, java.lang.CharSequence data) {
    this.timestamp = timestamp;
    this.current = current;
    this.format = format;
    this.tags = tags;
    this.username = username;
    this.deleted = deleted;
    this.moduleName = moduleName;
    this.moduleId = moduleId;
    this.metaData = metaData;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return current;
    case 2: return format;
    case 3: return tags;
    case 4: return username;
    case 5: return deleted;
    case 6: return moduleName;
    case 7: return moduleId;
    case 8: return metaData;
    case 9: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: current = (java.lang.Boolean)value$; break;
    case 2: format = (java.lang.CharSequence)value$; break;
    case 3: tags = (java.util.List<java.lang.CharSequence>)value$; break;
    case 4: username = (java.lang.CharSequence)value$; break;
    case 5: deleted = (java.lang.Boolean)value$; break;
    case 6: moduleName = (java.lang.CharSequence)value$; break;
    case 7: moduleId = (java.lang.CharSequence)value$; break;
    case 8: metaData = (java.lang.CharSequence)value$; break;
    case 9: data = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'current' field.
   */
  public java.lang.Boolean getCurrent() {
    return current;
  }

  /**
   * Sets the value of the 'current' field.
   * @param value the value to set.
   */
  public void setCurrent(java.lang.Boolean value) {
    this.current = value;
  }

  /**
   * Gets the value of the 'format' field.
   */
  public java.lang.CharSequence getFormat() {
    return format;
  }

  /**
   * Sets the value of the 'format' field.
   * @param value the value to set.
   */
  public void setFormat(java.lang.CharSequence value) {
    this.format = value;
  }

  /**
   * Gets the value of the 'tags' field.
   */
  public java.util.List<java.lang.CharSequence> getTags() {
    return tags;
  }

  /**
   * Sets the value of the 'tags' field.
   * @param value the value to set.
   */
  public void setTags(java.util.List<java.lang.CharSequence> value) {
    this.tags = value;
  }

  /**
   * Gets the value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'deleted' field.
   */
  public java.lang.Boolean getDeleted() {
    return deleted;
  }

  /**
   * Sets the value of the 'deleted' field.
   * @param value the value to set.
   */
  public void setDeleted(java.lang.Boolean value) {
    this.deleted = value;
  }

  /**
   * Gets the value of the 'moduleName' field.
   */
  public java.lang.CharSequence getModuleName() {
    return moduleName;
  }

  /**
   * Sets the value of the 'moduleName' field.
   * @param value the value to set.
   */
  public void setModuleName(java.lang.CharSequence value) {
    this.moduleName = value;
  }

  /**
   * Gets the value of the 'moduleId' field.
   */
  public java.lang.CharSequence getModuleId() {
    return moduleId;
  }

  /**
   * Sets the value of the 'moduleId' field.
   * @param value the value to set.
   */
  public void setModuleId(java.lang.CharSequence value) {
    this.moduleId = value;
  }

  /**
   * Gets the value of the 'metaData' field.
   */
  public java.lang.CharSequence getMetaData() {
    return metaData;
  }

  /**
   * Sets the value of the 'metaData' field.
   * @param value the value to set.
   */
  public void setMetaData(java.lang.CharSequence value) {
    this.metaData = value;
  }

  /**
   * Gets the value of the 'data' field.
   */
  public java.lang.CharSequence getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.lang.CharSequence value) {
    this.data = value;
  }

  /** Creates a new index RecordBuilder */
  public static net.digitalbebop.avro.index.Builder newBuilder() {
    return new net.digitalbebop.avro.index.Builder();
  }
  
  /** Creates a new index RecordBuilder by copying an existing Builder */
  public static net.digitalbebop.avro.index.Builder newBuilder(net.digitalbebop.avro.index.Builder other) {
    return new net.digitalbebop.avro.index.Builder(other);
  }
  
  /** Creates a new index RecordBuilder by copying an existing index instance */
  public static net.digitalbebop.avro.index.Builder newBuilder(net.digitalbebop.avro.index other) {
    return new net.digitalbebop.avro.index.Builder(other);
  }
  
  /**
   * RecordBuilder for index instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<index>
    implements org.apache.avro.data.RecordBuilder<index> {

    private long timestamp;
    private boolean current;
    private java.lang.CharSequence format;
    private java.util.List<java.lang.CharSequence> tags;
    private java.lang.CharSequence username;
    private boolean deleted;
    private java.lang.CharSequence moduleName;
    private java.lang.CharSequence moduleId;
    private java.lang.CharSequence metaData;
    private java.lang.CharSequence data;

    /** Creates a new Builder */
    private Builder() {
      super(net.digitalbebop.avro.index.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(net.digitalbebop.avro.index.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.current)) {
        this.current = data().deepCopy(fields()[1].schema(), other.current);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.format)) {
        this.format = data().deepCopy(fields()[2].schema(), other.format);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tags)) {
        this.tags = data().deepCopy(fields()[3].schema(), other.tags);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.username)) {
        this.username = data().deepCopy(fields()[4].schema(), other.username);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.deleted)) {
        this.deleted = data().deepCopy(fields()[5].schema(), other.deleted);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.moduleName)) {
        this.moduleName = data().deepCopy(fields()[6].schema(), other.moduleName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.moduleId)) {
        this.moduleId = data().deepCopy(fields()[7].schema(), other.moduleId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.metaData)) {
        this.metaData = data().deepCopy(fields()[8].schema(), other.metaData);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.data)) {
        this.data = data().deepCopy(fields()[9].schema(), other.data);
        fieldSetFlags()[9] = true;
      }
    }
    
    /** Creates a Builder by copying an existing index instance */
    private Builder(net.digitalbebop.avro.index other) {
            super(net.digitalbebop.avro.index.SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.current)) {
        this.current = data().deepCopy(fields()[1].schema(), other.current);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.format)) {
        this.format = data().deepCopy(fields()[2].schema(), other.format);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tags)) {
        this.tags = data().deepCopy(fields()[3].schema(), other.tags);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.username)) {
        this.username = data().deepCopy(fields()[4].schema(), other.username);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.deleted)) {
        this.deleted = data().deepCopy(fields()[5].schema(), other.deleted);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.moduleName)) {
        this.moduleName = data().deepCopy(fields()[6].schema(), other.moduleName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.moduleId)) {
        this.moduleId = data().deepCopy(fields()[7].schema(), other.moduleId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.metaData)) {
        this.metaData = data().deepCopy(fields()[8].schema(), other.metaData);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.data)) {
        this.data = data().deepCopy(fields()[9].schema(), other.data);
        fieldSetFlags()[9] = true;
      }
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public net.digitalbebop.avro.index.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'timestamp' field */
    public net.digitalbebop.avro.index.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'current' field */
    public java.lang.Boolean getCurrent() {
      return current;
    }
    
    /** Sets the value of the 'current' field */
    public net.digitalbebop.avro.index.Builder setCurrent(boolean value) {
      validate(fields()[1], value);
      this.current = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'current' field has been set */
    public boolean hasCurrent() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'current' field */
    public net.digitalbebop.avro.index.Builder clearCurrent() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'format' field */
    public java.lang.CharSequence getFormat() {
      return format;
    }
    
    /** Sets the value of the 'format' field */
    public net.digitalbebop.avro.index.Builder setFormat(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.format = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'format' field has been set */
    public boolean hasFormat() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'format' field */
    public net.digitalbebop.avro.index.Builder clearFormat() {
      format = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'tags' field */
    public java.util.List<java.lang.CharSequence> getTags() {
      return tags;
    }
    
    /** Sets the value of the 'tags' field */
    public net.digitalbebop.avro.index.Builder setTags(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.tags = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'tags' field has been set */
    public boolean hasTags() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'tags' field */
    public net.digitalbebop.avro.index.Builder clearTags() {
      tags = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'username' field */
    public java.lang.CharSequence getUsername() {
      return username;
    }
    
    /** Sets the value of the 'username' field */
    public net.digitalbebop.avro.index.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.username = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'username' field has been set */
    public boolean hasUsername() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'username' field */
    public net.digitalbebop.avro.index.Builder clearUsername() {
      username = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'deleted' field */
    public java.lang.Boolean getDeleted() {
      return deleted;
    }
    
    /** Sets the value of the 'deleted' field */
    public net.digitalbebop.avro.index.Builder setDeleted(boolean value) {
      validate(fields()[5], value);
      this.deleted = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'deleted' field has been set */
    public boolean hasDeleted() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'deleted' field */
    public net.digitalbebop.avro.index.Builder clearDeleted() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'moduleName' field */
    public java.lang.CharSequence getModuleName() {
      return moduleName;
    }
    
    /** Sets the value of the 'moduleName' field */
    public net.digitalbebop.avro.index.Builder setModuleName(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.moduleName = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'moduleName' field has been set */
    public boolean hasModuleName() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'moduleName' field */
    public net.digitalbebop.avro.index.Builder clearModuleName() {
      moduleName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'moduleId' field */
    public java.lang.CharSequence getModuleId() {
      return moduleId;
    }
    
    /** Sets the value of the 'moduleId' field */
    public net.digitalbebop.avro.index.Builder setModuleId(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.moduleId = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'moduleId' field has been set */
    public boolean hasModuleId() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'moduleId' field */
    public net.digitalbebop.avro.index.Builder clearModuleId() {
      moduleId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'metaData' field */
    public java.lang.CharSequence getMetaData() {
      return metaData;
    }
    
    /** Sets the value of the 'metaData' field */
    public net.digitalbebop.avro.index.Builder setMetaData(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.metaData = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'metaData' field has been set */
    public boolean hasMetaData() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'metaData' field */
    public net.digitalbebop.avro.index.Builder clearMetaData() {
      metaData = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'data' field */
    public java.lang.CharSequence getData() {
      return data;
    }
    
    /** Sets the value of the 'data' field */
    public net.digitalbebop.avro.index.Builder setData(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.data = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'data' field has been set */
    public boolean hasData() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'data' field */
    public net.digitalbebop.avro.index.Builder clearData() {
      data = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public index build() {
      try {
        index record = new index();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.current = fieldSetFlags()[1] ? this.current : (java.lang.Boolean) defaultValue(fields()[1]);
        record.format = fieldSetFlags()[2] ? this.format : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.tags = fieldSetFlags()[3] ? this.tags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        record.username = fieldSetFlags()[4] ? this.username : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.deleted = fieldSetFlags()[5] ? this.deleted : (java.lang.Boolean) defaultValue(fields()[5]);
        record.moduleName = fieldSetFlags()[6] ? this.moduleName : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.moduleId = fieldSetFlags()[7] ? this.moduleId : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.metaData = fieldSetFlags()[8] ? this.metaData : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.data = fieldSetFlags()[9] ? this.data : (java.lang.CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
